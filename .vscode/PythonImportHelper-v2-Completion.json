[
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Adafruit_GPIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Adafruit_GPIO",
        "description": "Adafruit_GPIO",
        "detail": "Adafruit_GPIO",
        "documentation": {}
    },
    {
        "label": "Adafruit_GPIO.SPI",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Adafruit_GPIO.SPI",
        "description": "Adafruit_GPIO.SPI",
        "detail": "Adafruit_GPIO.SPI",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Adafruit_SSD1306",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Adafruit_SSD1306",
        "description": "Adafruit_SSD1306",
        "detail": "Adafruit_SSD1306",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "RPi.GPIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "RPi.GPIO",
        "description": "RPi.GPIO",
        "detail": "RPi.GPIO",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pkg_resources",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkg_resources",
        "description": "pkg_resources",
        "detail": "pkg_resources",
        "documentation": {}
    },
    {
        "label": "sphinx_rtd_theme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx_rtd_theme",
        "description": "sphinx_rtd_theme",
        "detail": "sphinx_rtd_theme",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "zbarlight",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zbarlight",
        "description": "zbarlight",
        "detail": "zbarlight",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imutils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imutils",
        "description": "imutils",
        "detail": "imutils",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dbr",
        "description": "dbr",
        "isExtraImport": true,
        "detail": "dbr",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dbr",
        "description": "dbr",
        "isExtraImport": true,
        "detail": "dbr",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "compare",
        "importPath": "ColorDetection",
        "description": "ColorDetection",
        "isExtraImport": true,
        "detail": "ColorDetection",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "SpecifyCheckingArea",
        "description": "SpecifyCheckingArea",
        "isExtraImport": true,
        "detail": "SpecifyCheckingArea",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "SpecifyCheckingArea",
        "description": "SpecifyCheckingArea",
        "isExtraImport": true,
        "detail": "SpecifyCheckingArea",
        "documentation": {}
    },
    {
        "label": "capture_frame",
        "importPath": "capture_image",
        "description": "capture_image",
        "isExtraImport": true,
        "detail": "capture_image",
        "documentation": {}
    },
    {
        "label": "capture_frame",
        "importPath": "capture_image",
        "description": "capture_image",
        "isExtraImport": true,
        "detail": "capture_image",
        "documentation": {}
    },
    {
        "label": "capture_frame",
        "importPath": "capture_image",
        "description": "capture_image",
        "isExtraImport": true,
        "detail": "capture_image",
        "documentation": {}
    },
    {
        "label": "capture_frame",
        "importPath": "capture_image",
        "description": "capture_image",
        "isExtraImport": true,
        "detail": "capture_image",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "encode_image_to_base64",
        "importPath": "Image_Processing",
        "description": "Image_Processing",
        "isExtraImport": true,
        "detail": "Image_Processing",
        "documentation": {}
    },
    {
        "label": "Coordinates",
        "importPath": "Object.Coordinates",
        "description": "Object.Coordinates",
        "isExtraImport": true,
        "detail": "Object.Coordinates",
        "documentation": {}
    },
    {
        "label": "serialize_coordinates",
        "importPath": "Object.Coordinates",
        "description": "Object.Coordinates",
        "isExtraImport": true,
        "detail": "Object.Coordinates",
        "documentation": {}
    },
    {
        "label": "async_checking",
        "importPath": "async_checking",
        "description": "async_checking",
        "isExtraImport": true,
        "detail": "async_checking",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "cv2,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2.",
        "description": "cv2.",
        "detail": "cv2.",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "pyzbar.pyzbar",
        "description": "pyzbar.pyzbar",
        "isExtraImport": true,
        "detail": "pyzbar.pyzbar",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "zbarscanner",
        "description": "zbarscanner",
        "isExtraImport": true,
        "detail": "zbarscanner",
        "documentation": {}
    },
    {
        "label": "Camera",
        "importPath": "SimpleCV",
        "description": "SimpleCV",
        "isExtraImport": true,
        "detail": "SimpleCV",
        "documentation": {}
    },
    {
        "label": "pyzbar",
        "importPath": "pyzbar",
        "description": "pyzbar",
        "isExtraImport": true,
        "detail": "pyzbar",
        "documentation": {}
    },
    {
        "label": "SSD1306Base",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')\n        self._spi = None\n        self._i2c = None",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_128_64",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_128_64(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_128_64, self).__init__(128, 64, rst, dc, sclk, din, cs,\n                                             gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x64 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_128_32",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_128_32(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_128_32, self).__init__(128, 32, rst, dc, sclk, din, cs,\n                                             gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x32 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_96_16",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_96_16(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_96_16, self).__init__(96, 16, rst, dc, sclk, din, cs,\n                                            gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x32 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_I2C_ADDRESS",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_I2C_ADDRESS = 0x3C    # 011110+SA0+RW - 0x3C or 0x3D\nSSD1306_SETCONTRAST = 0x81\nSSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETCONTRAST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETCONTRAST = 0x81\nSSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYALLON_RESUME",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYALLON",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_NORMALDISPLAY",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_INVERTDISPLAY",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYOFF",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYON",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETDISPLAYOFFSET",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETCOMPINS",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETVCOMDETECT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETDISPLAYCLOCKDIV",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETPRECHARGE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETMULTIPLEX",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETLOWCOLUMN",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETHIGHCOLUMN",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETSTARTLINE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_MEMORYMODE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COLUMNADDR",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_PAGEADDR",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COMSCANINC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COMSCANDEC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SEGREMAP",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_CHARGEPUMP",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_EXTERNALVCC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SWITCHCAPVCC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_ACTIVATE_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DEACTIVATE_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SET_VERTICAL_SCROLL_AREA",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_RIGHT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_LEFT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')\n        self._spi = None",
        "detail": "Adafruit_Python_SSD1306.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306Base",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')\n        self._spi = None\n        self._i2c = None",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_128_64",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_128_64(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_128_64, self).__init__(128, 64, rst, dc, sclk, din, cs,\n                                             gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x64 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_128_32",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_128_32(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_128_32, self).__init__(128, 32, rst, dc, sclk, din, cs,\n                                             gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x32 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_96_16",
        "kind": 6,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "class SSD1306_96_16(SSD1306Base):\n    def __init__(self, rst, dc=None, sclk=None, din=None, cs=None, gpio=None,\n                 spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        # Call base class constructor.\n        super(SSD1306_96_16, self).__init__(96, 16, rst, dc, sclk, din, cs,\n                                            gpio, spi, i2c_bus, i2c_address, i2c)\n    def _initialize(self):\n        # 128x32 pixel specific initialization.\n        self.command(SSD1306_DISPLAYOFF)                    # 0xAE",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_I2C_ADDRESS",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_I2C_ADDRESS = 0x3C    # 011110+SA0+RW - 0x3C or 0x3D\nSSD1306_SETCONTRAST = 0x81\nSSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETCONTRAST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETCONTRAST = 0x81\nSSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYALLON_RESUME",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYALLON_RESUME = 0xA4\nSSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYALLON",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYALLON = 0xA5\nSSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_NORMALDISPLAY",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_NORMALDISPLAY = 0xA6\nSSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_INVERTDISPLAY",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_INVERTDISPLAY = 0xA7\nSSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYOFF",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYOFF = 0xAE\nSSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DISPLAYON",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DISPLAYON = 0xAF\nSSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETDISPLAYOFFSET",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETDISPLAYOFFSET = 0xD3\nSSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETCOMPINS",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETCOMPINS = 0xDA\nSSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETVCOMDETECT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETVCOMDETECT = 0xDB\nSSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETDISPLAYCLOCKDIV",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETDISPLAYCLOCKDIV = 0xD5\nSSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETPRECHARGE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETPRECHARGE = 0xD9\nSSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETMULTIPLEX",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETMULTIPLEX = 0xA8\nSSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETLOWCOLUMN",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETLOWCOLUMN = 0x00\nSSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETHIGHCOLUMN",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETHIGHCOLUMN = 0x10\nSSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SETSTARTLINE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SETSTARTLINE = 0x40\nSSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_MEMORYMODE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_MEMORYMODE = 0x20\nSSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COLUMNADDR",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COLUMNADDR = 0x21\nSSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_PAGEADDR",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_PAGEADDR = 0x22\nSSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COMSCANINC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COMSCANINC = 0xC0\nSSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_COMSCANDEC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_COMSCANDEC = 0xC8\nSSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SEGREMAP",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SEGREMAP = 0xA0\nSSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_CHARGEPUMP",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_CHARGEPUMP = 0x8D\nSSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_EXTERNALVCC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_EXTERNALVCC = 0x1\nSSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SWITCHCAPVCC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SWITCHCAPVCC = 0x2\n# Scrolling constants\nSSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_ACTIVATE_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_ACTIVATE_SCROLL = 0x2F\nSSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_DEACTIVATE_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_DEACTIVATE_SCROLL = 0x2E\nSSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_SET_VERTICAL_SCROLL_AREA",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3\nSSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_RIGHT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26\nSSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_LEFT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27\nSSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29\nSSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "description": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "peekOfCode": "SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A\nclass SSD1306Base(object):\n    \"\"\"Base class for SSD1306-based OLED displays.  Implementors should subclass\n    and provide an implementation for the _initialize function.\n    \"\"\"\n    def __init__(self, width, height, rst, dc=None, sclk=None, din=None, cs=None,\n                 gpio=None, spi=None, i2c_bus=None, i2c_address=SSD1306_I2C_ADDRESS,\n                 i2c=None):\n        self._log = logging.getLogger('Adafruit_SSD1306.SSD1306Base')\n        self._spi = None",
        "detail": "Adafruit_Python_SSD1306.build.lib.Adafruit_SSD1306.SSD1306",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "RST = 24\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n# 128x32 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n# 128x64 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n# Initialize library.\ndisp.begin()\n# Get display width and height.",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "width = disp.width\nheight = disp.height\n# Clear display.\ndisp.clear()\ndisp.display()\n# Create image buffer.\n# Make sure to create image with mode '1' for 1-bit color.\nimage = Image.new('1', (width, height))\n# Load default font.\nfont = ImageFont.load_default()",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "height = disp.height\n# Clear display.\ndisp.clear()\ndisp.display()\n# Create image buffer.\n# Make sure to create image with mode '1' for 1-bit color.\nimage = Image.new('1', (width, height))\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as this python script!",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "image = Image.new('1', (width, height))\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as this python script!\n# Some nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\n# Create drawing object.\ndraw = ImageDraw.Draw(image)\n# Define text and get total width.\ntext = 'SSD1306 ORGANIC LED DISPLAY. THIS IS AN OLD SCHOOL DEMO SCROLLER!! GREETZ TO: LADYADA & THE ADAFRUIT CREW, TRIXTER, FUTURE CREW, AND FARBRAUSCH'",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "font = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as this python script!\n# Some nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\n# Create drawing object.\ndraw = ImageDraw.Draw(image)\n# Define text and get total width.\ntext = 'SSD1306 ORGANIC LED DISPLAY. THIS IS AN OLD SCHOOL DEMO SCROLLER!! GREETZ TO: LADYADA & THE ADAFRUIT CREW, TRIXTER, FUTURE CREW, AND FARBRAUSCH'\nmaxwidth, unused = draw.textsize(text, font=font)\n# Set animation and sine wave parameters.",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "draw = ImageDraw.Draw(image)\n# Define text and get total width.\ntext = 'SSD1306 ORGANIC LED DISPLAY. THIS IS AN OLD SCHOOL DEMO SCROLLER!! GREETZ TO: LADYADA & THE ADAFRUIT CREW, TRIXTER, FUTURE CREW, AND FARBRAUSCH'\nmaxwidth, unused = draw.textsize(text, font=font)\n# Set animation and sine wave parameters.\namplitude = height/4\noffset = height/2 - 4\nvelocity = -2\nstartpos = width\n# Animate text moving in sine wave.",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "text = 'SSD1306 ORGANIC LED DISPLAY. THIS IS AN OLD SCHOOL DEMO SCROLLER!! GREETZ TO: LADYADA & THE ADAFRUIT CREW, TRIXTER, FUTURE CREW, AND FARBRAUSCH'\nmaxwidth, unused = draw.textsize(text, font=font)\n# Set animation and sine wave parameters.\namplitude = height/4\noffset = height/2 - 4\nvelocity = -2\nstartpos = width\n# Animate text moving in sine wave.\nprint('Press Ctrl-C to quit.')\npos = startpos",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "amplitude",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "amplitude = height/4\noffset = height/2 - 4\nvelocity = -2\nstartpos = width\n# Animate text moving in sine wave.\nprint('Press Ctrl-C to quit.')\npos = startpos\nwhile True:\n    # Clear image buffer by drawing a black filled box.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "offset",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "offset = height/2 - 4\nvelocity = -2\nstartpos = width\n# Animate text moving in sine wave.\nprint('Press Ctrl-C to quit.')\npos = startpos\nwhile True:\n    # Clear image buffer by drawing a black filled box.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Enumerate characters and draw them offset vertically based on a sine wave.",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "velocity",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "velocity = -2\nstartpos = width\n# Animate text moving in sine wave.\nprint('Press Ctrl-C to quit.')\npos = startpos\nwhile True:\n    # Clear image buffer by drawing a black filled box.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Enumerate characters and draw them offset vertically based on a sine wave.\n    x = pos",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "startpos",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "startpos = width\n# Animate text moving in sine wave.\nprint('Press Ctrl-C to quit.')\npos = startpos\nwhile True:\n    # Clear image buffer by drawing a black filled box.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Enumerate characters and draw them offset vertically based on a sine wave.\n    x = pos\n    for i, c in enumerate(text):",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.animate",
        "description": "Adafruit_Python_SSD1306.examples.animate",
        "peekOfCode": "pos = startpos\nwhile True:\n    # Clear image buffer by drawing a black filled box.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Enumerate characters and draw them offset vertically based on a sine wave.\n    x = pos\n    for i, c in enumerate(text):\n        # Stop drawing if off the right side of screen.\n        if x > width:\n            break",
        "detail": "Adafruit_Python_SSD1306.examples.animate",
        "documentation": {}
    },
    {
        "label": "L_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "L_pin = 27 \nR_pin = 23 \nC_pin = 4 \nU_pin = 17 \nD_pin = 22 \nA_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "R_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "R_pin = 23 \nC_pin = 4 \nU_pin = 17 \nD_pin = 22 \nA_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "C_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "C_pin = 4 \nU_pin = 17 \nD_pin = 22 \nA_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(R_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "U_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "U_pin = 17 \nD_pin = 22 \nA_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(R_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(U_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "D_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "D_pin = 22 \nA_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(R_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(U_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(D_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "A_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "A_pin = 5 \nB_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(R_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(U_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(D_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(C_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "B_pin",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "B_pin = 6 \nGPIO.setmode(GPIO.BCM) \nGPIO.setup(A_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(B_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(L_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(R_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(U_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(D_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\nGPIO.setup(C_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) # Input with pull-up\n# Raspberry Pi pin configuration:",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "RST = 24\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n# Note you can change the I2C address by passing an i2c_address parameter like:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, i2c_address=0x3C)\n# Alternatively you can specify an explicit I2C bus number, for example\n# with the 128x32 display you would use:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, i2c_bus=2)\n# 128x32 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n# 128x64 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "width = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\ntry:\n    while 1:\n        if GPIO.input(U_pin): # button is released",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "height = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\ntry:\n    while 1:\n        if GPIO.input(U_pin): # button is released\n            draw.polygon([(20, 20), (30, 2), (40, 20)], outline=255, fill=0)  #Up",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "image = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\ntry:\n    while 1:\n        if GPIO.input(U_pin): # button is released\n            draw.polygon([(20, 20), (30, 2), (40, 20)], outline=255, fill=0)  #Up\n        else: # button is pressed:",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.buttons",
        "description": "Adafruit_Python_SSD1306.examples.buttons",
        "peekOfCode": "draw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\ntry:\n    while 1:\n        if GPIO.input(U_pin): # button is released\n            draw.polygon([(20, 20), (30, 2), (40, 20)], outline=255, fill=0)  #Up\n        else: # button is pressed:\n            draw.polygon([(20, 20), (30, 2), (40, 20)], outline=255, fill=1)  #Up filled\n        if GPIO.input(L_pin): # button is released",
        "detail": "Adafruit_Python_SSD1306.examples.buttons",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "RST = 24\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n# 128x32 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n# 128x64 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))\n# Initialize library.\ndisp.begin()\n# Clear display.",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "#image",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.image",
        "description": "Adafruit_Python_SSD1306.examples.image",
        "peekOfCode": "#image = Image.open('happycat.png').resize((disp.width, disp.height), Image.ANTIALIAS).convert('1')\n# Display image.\ndisp.image(image)\ndisp.display()",
        "detail": "Adafruit_Python_SSD1306.examples.image",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "RST = 24\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n# Note you can change the I2C address by passing an i2c_address parameter like:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, i2c_address=0x3C)\n# Alternatively you can specify an explicit I2C bus number, for example\n# with the 128x32 display you would use:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, i2c_bus=2)\n# 128x32 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "width = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = 2",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "height = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = 2\nshape_width = 20",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "image = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = 2\nshape_width = 20\ntop = padding",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "draw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = 2\nshape_width = 20\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "padding = 2\nshape_width = 20\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = padding\n# Draw an ellipse.\ndraw.ellipse((x, top , x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a rectangle.",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "shape_width",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "shape_width = 20\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = padding\n# Draw an ellipse.\ndraw.ellipse((x, top , x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a rectangle.\ndraw.rectangle((x, top, x+shape_width, bottom), outline=255, fill=0)",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "top = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = padding\n# Draw an ellipse.\ndraw.ellipse((x, top , x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a rectangle.\ndraw.rectangle((x, top, x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "bottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = padding\n# Draw an ellipse.\ndraw.ellipse((x, top , x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a rectangle.\ndraw.rectangle((x, top, x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a triangle.",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "x = padding\n# Draw an ellipse.\ndraw.ellipse((x, top , x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a rectangle.\ndraw.rectangle((x, top, x+shape_width, bottom), outline=255, fill=0)\nx += shape_width+padding\n# Draw a triangle.\ndraw.polygon([(x, bottom), (x+shape_width/2, top), (x+shape_width, bottom)], outline=255, fill=0)\nx += shape_width+padding",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "font = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n#font = ImageFont.truetype('Minecraftia.ttf', 8)\n# Write two lines of text.\ndraw.text((x, top),    'Hello',  font=font, fill=255)\ndraw.text((x, top+20), 'World!', font=font, fill=255)\n# Display image.\ndisp.image(image)\ndisp.display()",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "#font",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.shapes",
        "description": "Adafruit_Python_SSD1306.examples.shapes",
        "peekOfCode": "#font = ImageFont.truetype('Minecraftia.ttf', 8)\n# Write two lines of text.\ndraw.text((x, top),    'Hello',  font=font, fill=255)\ndraw.text((x, top+20), 'World!', font=font, fill=255)\n# Display image.\ndisp.image(image)\ndisp.display()",
        "detail": "Adafruit_Python_SSD1306.examples.shapes",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "RST = None     # on the PiOLED this pin isnt used\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST = 'P9_12'\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# 128x64 display with hardware I2C:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST)\n# Note you can change the I2C address by passing an i2c_address parameter like:\n# disp = Adafruit_SSD1306.SSD1306_128_64(rst=RST, i2c_address=0x3C)\n# Alternatively you can specify an explicit I2C bus number, for example\n# with the 128x32 display you would use:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, i2c_bus=2)\n# 128x32 display with hardware SPI:\n# disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST, dc=DC, spi=SPI.SpiDev(SPI_PORT, SPI_DEVICE, max_speed_hz=8000000))",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "width = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "height = disp.height\nimage = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "image = Image.new('1', (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height-padding",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "draw = ImageDraw.Draw(image)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "padding = -2\ntop = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "top = padding\nbottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\nwhile True:",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "bottom = height-padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\nwhile True:\n    # Draw a black filled box to clear the image.",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "x = 0\n# Load default font.\nfont = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\nwhile True:\n    # Draw a black filled box to clear the image.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.examples.stats",
        "description": "Adafruit_Python_SSD1306.examples.stats",
        "peekOfCode": "font = ImageFont.load_default()\n# Alternatively load a TTF font.  Make sure the .ttf font file is in the same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\n# font = ImageFont.truetype('Minecraftia.ttf', 8)\nwhile True:\n    # Draw a black filled box to clear the image.\n    draw.rectangle((0,0,width,height), outline=0, fill=0)\n    # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load\n    cmd = \"hostname -I | cut -d\\' \\' -f1\"\n    IP = subprocess.check_output(cmd, shell = True )",
        "detail": "Adafruit_Python_SSD1306.examples.stats",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.setup",
        "description": "Adafruit_Python_SSD1306.setup",
        "peekOfCode": "here = os.path.abspath(os.path.dirname(__file__))\n# Import the README and use it as the long-description.\nwith io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = '\\n' + f.read()\nclassifiers = ['Development Status :: 4 - Beta',\n               'Operating System :: POSIX :: Linux',\n               'License :: OSI Approved :: MIT License',\n               'Intended Audience :: Developers',\n               'Programming Language :: Python :: 2.7',\n               'Programming Language :: Python :: 3',",
        "detail": "Adafruit_Python_SSD1306.setup",
        "documentation": {}
    },
    {
        "label": "classifiers",
        "kind": 5,
        "importPath": "Adafruit_Python_SSD1306.setup",
        "description": "Adafruit_Python_SSD1306.setup",
        "peekOfCode": "classifiers = ['Development Status :: 4 - Beta',\n               'Operating System :: POSIX :: Linux',\n               'License :: OSI Approved :: MIT License',\n               'Intended Audience :: Developers',\n               'Programming Language :: Python :: 2.7',\n               'Programming Language :: Python :: 3',\n               'Topic :: Software Development',\n               'Topic :: System :: Hardware']\nsetup(name              = 'Adafruit_SSD1306',\n      version           = '1.6.2',",
        "detail": "Adafruit_Python_SSD1306.setup",
        "documentation": {}
    },
    {
        "label": "_Zbarlight",
        "kind": 6,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "class _Zbarlight(object):\n    \"\"\"\n    Fake zbarlight C extension\n    Should be updated when C extension change.\n    \"\"\"\n    def zbar_code_scanner(self, *args):\n        pass\n    def version(self):\n        pass\n    @classmethod",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "project = u'zbarlight'\ncopyright = u'2014, Polyconseil'\nversion = pkg_resources.get_distribution('zbarlight').version\nrelease = version\nextensions = ['sphinx.ext.intersphinx', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon']\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "copyright = u'2014, Polyconseil'\nversion = pkg_resources.get_distribution('zbarlight').version\nrelease = version\nextensions = ['sphinx.ext.intersphinx', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon']\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []\nsource_suffix = '.rst'",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "version = pkg_resources.get_distribution('zbarlight').version\nrelease = version\nextensions = ['sphinx.ext.intersphinx', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon']\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []\nsource_suffix = '.rst'\nmaster_doc = 'index'",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "release = version\nextensions = ['sphinx.ext.intersphinx', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon']\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []\nsource_suffix = '.rst'\nmaster_doc = 'index'\npygments_style = 'sphinx'",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "extensions = ['sphinx.ext.intersphinx', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon']\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []\nsource_suffix = '.rst'\nmaster_doc = 'index'\npygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "intersphinx_mapping",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "intersphinx_mapping = {\n    'python': ('https://docs.python.org/3', None),\n    'pillow': ('https://pillow.readthedocs.io/en/latest', None),\n}\ntemplates_path = []\nsource_suffix = '.rst'\nmaster_doc = 'index'\npygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "templates_path = []\nsource_suffix = '.rst'\nmaster_doc = 'index'\npygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "source_suffix = '.rst'\nmaster_doc = 'index'\npygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "master_doc = 'index'\npygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\nhtml_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "html_theme = 'sphinx_rtd_theme'\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\nhtml_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "zbarlight.docs.conf",
        "description": "zbarlight.docs.conf",
        "peekOfCode": "html_static_path = []",
        "detail": "zbarlight.docs.conf",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def get_image(name, ext='png'):\n    directory = pathlib.Path(__file__).parent\n    file_path = directory / 'fixtures' / '{}.{}'.format(name, ext)\n    with open(str(file_path), 'rb') as image_file:\n        image = Image.open(image_file)\n        image.load()\n    return image\ndef test_no_qr_code():\n    image = get_image('no_qr_code')\n    assert zbarlight.scan_codes(['qrcode'], image) is None",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_no_qr_code",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_no_qr_code():\n    image = get_image('no_qr_code')\n    assert zbarlight.scan_codes(['qrcode'], image) is None\ndef compute_parametrize_id(value):\n    if isinstance(value, list):\n        if all(isinstance(element, bytes) for element in value):\n            return '<bytes>'\n        return ','.join(value)\n    return value\n@pytest.mark.parametrize(",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "compute_parametrize_id",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def compute_parametrize_id(value):\n    if isinstance(value, list):\n        if all(isinstance(element, bytes) for element in value):\n            return '<bytes>'\n        return ','.join(value)\n    return value\n@pytest.mark.parametrize(\n    argnames='image_name, symbologies, excepted_codes',\n    argvalues=(\n        pytest.param(",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_scan_codes",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_scan_codes(image_name, symbologies, excepted_codes):\n    image = get_image(image_name)\n    detected_codes = zbarlight.scan_codes(symbologies, image)\n    assert sorted(detected_codes) == sorted(excepted_codes)\ndef test_unknown_symbology():\n    image = get_image('no_qr_code')\n    with pytest.raises(zbarlight.UnknownSymbologieError):\n        zbarlight.scan_codes(['not-a-zbar-symbologie'], image)\ndef test_need_white_background():\n    \"\"\"User submitted sample that can only be decoded after add a white background.\"\"\"",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_unknown_symbology",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_unknown_symbology():\n    image = get_image('no_qr_code')\n    with pytest.raises(zbarlight.UnknownSymbologieError):\n        zbarlight.scan_codes(['not-a-zbar-symbologie'], image)\ndef test_need_white_background():\n    \"\"\"User submitted sample that can only be decoded after add a white background.\"\"\"\n    image = get_image('sample_need_white_background')\n    excepted_codes = [b'http://en.m.wikipedia.org']\n    # No code is detected on the original image\n    original_codes = zbarlight.scan_codes(['qrcode'], image)",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_need_white_background",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_need_white_background():\n    \"\"\"User submitted sample that can only be decoded after add a white background.\"\"\"\n    image = get_image('sample_need_white_background')\n    excepted_codes = [b'http://en.m.wikipedia.org']\n    # No code is detected on the original image\n    original_codes = zbarlight.scan_codes(['qrcode'], image)\n    assert original_codes is None\n    # But code is detected when adding a white background\n    image_with_background = zbarlight.copy_image_on_background(image)\n    background_codes = zbarlight.scan_codes(['qrcode'], image_with_background)",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_code_type_deprecation",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_code_type_deprecation():\n    image = get_image('one_qr_code_and_one_ean')\n    expected_codes = [b'zbarlight test qr code']\n    with pytest.deprecated_call():\n        detected_codes = zbarlight.scan_codes('qrcode', image)\n    assert detected_codes == expected_codes\n@pytest.mark.xfail\ndef test_only_thumbnail_works():\n    \"\"\"User submitted sample that can only be decoded after thumbnail or after adding a black border of at least 5px.\"\"\"\n    expected_codes = [b\"It's great! Your app works!\"]",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "test_only_thumbnail_works",
        "kind": 2,
        "importPath": "zbarlight.tests.test_scan_codes",
        "description": "zbarlight.tests.test_scan_codes",
        "peekOfCode": "def test_only_thumbnail_works():\n    \"\"\"User submitted sample that can only be decoded after thumbnail or after adding a black border of at least 5px.\"\"\"\n    expected_codes = [b\"It's great! Your app works!\"]\n    # Codes are detected on thumbnail\n    image = get_image('sample_only_thumbnail_works', ext='jpg')\n    image.thumbnail((image.size[0] / 8, image.size[1] / 8))\n    thumbnail_codes = zbarlight.scan_codes(['qrcode'], image)\n    assert thumbnail_codes == expected_codes\n    # Codes are detected by adding a black border of 5px\n    image = get_image('sample_only_thumbnail_works', ext='jpg')",
        "detail": "zbarlight.tests.test_scan_codes",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "zbarlight.run",
        "description": "zbarlight.run",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('image', help='input image')\n    args = parser.parse_args()\n    with open(args.image, 'rb') as image_file:\n        image = Image.open(image_file)\n        image.load()\n        codes = zbarlight.scan_codes(['qrcode'], image)\n        print('QR codes: %s' % codes)\nif __name__ == '__main__':",
        "detail": "zbarlight.run",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "def detect(image):\n\t# convert the image to grayscale\n\tgray = image\n\t# compute the Scharr gradient magnitude representation of the images\n\t# in both the x and y direction using OpenCV 2.4\n\tddepth = cv2.cv.CV_32F if imutils.is_cv2() else cv2.CV_32F\n\tgradX = cv2.Sobel(gray, ddepth=ddepth, dx=1, dy=0, ksize=-1)\n\t# subtract the y-gradient from the x-gradient\n\tgradient = cv2.subtract(gradX, gradY)\n\tgradient = cv2.convertScaleAbs(gradient)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tgray",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tgray = image\n\t# compute the Scharr gradient magnitude representation of the images\n\t# in both the x and y direction using OpenCV 2.4\n\tddepth = cv2.cv.CV_32F if imutils.is_cv2() else cv2.CV_32F\n\tgradX = cv2.Sobel(gray, ddepth=ddepth, dx=1, dy=0, ksize=-1)\n\t# subtract the y-gradient from the x-gradient\n\tgradient = cv2.subtract(gradX, gradY)\n\tgradient = cv2.convertScaleAbs(gradient)\n\t# blur and threshold the image\n\tblurred = cv2.blur(gradient, (9, 9))",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tddepth",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tddepth = cv2.cv.CV_32F if imutils.is_cv2() else cv2.CV_32F\n\tgradX = cv2.Sobel(gray, ddepth=ddepth, dx=1, dy=0, ksize=-1)\n\t# subtract the y-gradient from the x-gradient\n\tgradient = cv2.subtract(gradX, gradY)\n\tgradient = cv2.convertScaleAbs(gradient)\n\t# blur and threshold the image\n\tblurred = cv2.blur(gradient, (9, 9))\n\t(_, thresh) = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)\n\t# construct a closing kernel and apply it to the thresholded image\n\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tgradX",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tgradX = cv2.Sobel(gray, ddepth=ddepth, dx=1, dy=0, ksize=-1)\n\t# subtract the y-gradient from the x-gradient\n\tgradient = cv2.subtract(gradX, gradY)\n\tgradient = cv2.convertScaleAbs(gradient)\n\t# blur and threshold the image\n\tblurred = cv2.blur(gradient, (9, 9))\n\t(_, thresh) = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)\n\t# construct a closing kernel and apply it to the thresholded image\n\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))\n\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tgradient",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tgradient = cv2.subtract(gradX, gradY)\n\tgradient = cv2.convertScaleAbs(gradient)\n\t# blur and threshold the image\n\tblurred = cv2.blur(gradient, (9, 9))\n\t(_, thresh) = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)\n\t# construct a closing kernel and apply it to the thresholded image\n\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))\n\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n\t# perform a series of erosions and dilations\n\tclosed = cv2.erode(closed, None, iterations=4)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tgradient",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tgradient = cv2.convertScaleAbs(gradient)\n\t# blur and threshold the image\n\tblurred = cv2.blur(gradient, (9, 9))\n\t(_, thresh) = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)\n\t# construct a closing kernel and apply it to the thresholded image\n\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))\n\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n\t# perform a series of erosions and dilations\n\tclosed = cv2.erode(closed, None, iterations=4)\n\tclosed = cv2.dilate(closed, None, iterations=4)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tblurred",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tblurred = cv2.blur(gradient, (9, 9))\n\t(_, thresh) = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)\n\t# construct a closing kernel and apply it to the thresholded image\n\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))\n\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n\t# perform a series of erosions and dilations\n\tclosed = cv2.erode(closed, None, iterations=4)\n\tclosed = cv2.dilate(closed, None, iterations=4)\n\t# find the contours in the thresholded image\n\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tkernel",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tkernel = cv2.getStructuringElement(cv2.MORPH_RECT, (21, 7))\n\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n\t# perform a series of erosions and dilations\n\tclosed = cv2.erode(closed, None, iterations=4)\n\tclosed = cv2.dilate(closed, None, iterations=4)\n\t# find the contours in the thresholded image\n\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,\n\t\tcv2.CHAIN_APPROX_SIMPLE)\n\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tclosed",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tclosed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n\t# perform a series of erosions and dilations\n\tclosed = cv2.erode(closed, None, iterations=4)\n\tclosed = cv2.dilate(closed, None, iterations=4)\n\t# find the contours in the thresholded image\n\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,\n\t\tcv2.CHAIN_APPROX_SIMPLE)\n\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None\n\tif len(cnts) == 0:",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tclosed",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tclosed = cv2.erode(closed, None, iterations=4)\n\tclosed = cv2.dilate(closed, None, iterations=4)\n\t# find the contours in the thresholded image\n\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,\n\t\tcv2.CHAIN_APPROX_SIMPLE)\n\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None\n\tif len(cnts) == 0:\n\t\treturn None\n\t# otherwise, sort the contours by area and compute the rotated",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tclosed",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tclosed = cv2.dilate(closed, None, iterations=4)\n\t# find the contours in the thresholded image\n\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,\n\t\tcv2.CHAIN_APPROX_SIMPLE)\n\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None\n\tif len(cnts) == 0:\n\t\treturn None\n\t# otherwise, sort the contours by area and compute the rotated\n\t# bounding box of the largest contour",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tcnts",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tcnts = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL,\n\t\tcv2.CHAIN_APPROX_SIMPLE)\n\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None\n\tif len(cnts) == 0:\n\t\treturn None\n\t# otherwise, sort the contours by area and compute the rotated\n\t# bounding box of the largest contour\n\tc = sorted(cnts, key=cv2.contourArea, reverse=True)[0]\n\trect = cv2.minAreaRect(c)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tcnts",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tcnts = imutils.grab_contours(cnts)\n\t# if no contours were found, return None\n\tif len(cnts) == 0:\n\t\treturn None\n\t# otherwise, sort the contours by area and compute the rotated\n\t# bounding box of the largest contour\n\tc = sorted(cnts, key=cv2.contourArea, reverse=True)[0]\n\trect = cv2.minAreaRect(c)\n\tbox = cv2.cv.BoxPoints(rect) if imutils.is_cv2() else cv2.boxPoints(rect)\n\tbox = np.intp(box)",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tc",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tc = sorted(cnts, key=cv2.contourArea, reverse=True)[0]\n\trect = cv2.minAreaRect(c)\n\tbox = cv2.cv.BoxPoints(rect) if imutils.is_cv2() else cv2.boxPoints(rect)\n\tbox = np.intp(box)\n\tx, y, w, h = cv2.boundingRect(c)\n\tboxes.append([x,y, x+w,y+h])\n\tcv2.rectangle(thresh, (x,y), (x+w,y+h), 255, 2)\n\tcv2.drawContours(thresh, [c], -1, 128, -1)\n\tboxes = np.asarray(boxes)\n\tleft = np.min(boxes[:,0])",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\trect",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\trect = cv2.minAreaRect(c)\n\tbox = cv2.cv.BoxPoints(rect) if imutils.is_cv2() else cv2.boxPoints(rect)\n\tbox = np.intp(box)\n\tx, y, w, h = cv2.boundingRect(c)\n\tboxes.append([x,y, x+w,y+h])\n\tcv2.rectangle(thresh, (x,y), (x+w,y+h), 255, 2)\n\tcv2.drawContours(thresh, [c], -1, 128, -1)\n\tboxes = np.asarray(boxes)\n\tleft = np.min(boxes[:,0])\n\ttop = np.min(boxes[:,1])",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tbox",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tbox = cv2.cv.BoxPoints(rect) if imutils.is_cv2() else cv2.boxPoints(rect)\n\tbox = np.intp(box)\n\tx, y, w, h = cv2.boundingRect(c)\n\tboxes.append([x,y, x+w,y+h])\n\tcv2.rectangle(thresh, (x,y), (x+w,y+h), 255, 2)\n\tcv2.drawContours(thresh, [c], -1, 128, -1)\n\tboxes = np.asarray(boxes)\n\tleft = np.min(boxes[:,0])\n\ttop = np.min(boxes[:,1])\n\tright = np.max(boxes[:,2])",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tbox",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tbox = np.intp(box)\n\tx, y, w, h = cv2.boundingRect(c)\n\tboxes.append([x,y, x+w,y+h])\n\tcv2.rectangle(thresh, (x,y), (x+w,y+h), 255, 2)\n\tcv2.drawContours(thresh, [c], -1, 128, -1)\n\tboxes = np.asarray(boxes)\n\tleft = np.min(boxes[:,0])\n\ttop = np.min(boxes[:,1])\n\tright = np.max(boxes[:,2])\n\tbottom = np.max(boxes[:,3])",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tboxes",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tboxes = np.asarray(boxes)\n\tleft = np.min(boxes[:,0])\n\ttop = np.min(boxes[:,1])\n\tright = np.max(boxes[:,2])\n\tbottom = np.max(boxes[:,3])\n\t# return the bounding box of the barcode\n\treturn image",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tleft",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tleft = np.min(boxes[:,0])\n\ttop = np.min(boxes[:,1])\n\tright = np.max(boxes[:,2])\n\tbottom = np.max(boxes[:,3])\n\t# return the bounding box of the barcode\n\treturn image",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\ttop",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\ttop = np.min(boxes[:,1])\n\tright = np.max(boxes[:,2])\n\tbottom = np.max(boxes[:,3])\n\t# return the bounding box of the barcode\n\treturn image",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tright",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tright = np.max(boxes[:,2])\n\tbottom = np.max(boxes[:,3])\n\t# return the bounding box of the barcode\n\treturn image",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "\tbottom",
        "kind": 5,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "\tbottom = np.max(boxes[:,3])\n\t# return the bounding box of the barcode\n\treturn image",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "detect_dmc",
        "description": "detect_dmc",
        "peekOfCode": "def detect(path):\n    global image\n    well = np.array(Image.open(path))\n    well = cv2.cvtColor(well, cv2.COLOR_BGRA2GRAY)\n    harris = cv2.cornerHarris(well, 4, 1, 0.00)\n    cv2.imwrite('b.jpg', harris)\n    x, thr = cv2.threshold(harris, 0.1 * harris.max(), 255, cv2.THRESH_BINARY)\n    thr = thr.astype('uint8')\n    cv2.imwrite('c.jpg', thr)\n    contours, hierarchy = cv2.findContours(thr, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)",
        "detail": "detect_dmc",
        "documentation": {}
    },
    {
        "label": "SampleObject",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class SampleObject:\n    def __init__(self, id, picture, remark):\n        self.id = id\n        self.picture = picture\n        self.remark = remark\ndef menu(name):\n    # Use a breakpoint in the code line below to debug your script.\n    # print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n    if name == 1:\n        capture_frame(False)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "def menu(name):\n    # Use a breakpoint in the code line below to debug your script.\n    # print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n    if name == 1:\n        capture_frame(False)\n        areas = []\n        with open(file_path, 'r') as file:\n            for line in file:\n                top_left_x: int = int(line.strip().split(',')[0])\n                top_left_y: int = int(line.strip().split(',')[1])",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "file_path = 'coordinate.txt'\nclass SampleObject:\n    def __init__(self, id, picture, remark):\n        self.id = id\n        self.picture = picture\n        self.remark = remark\ndef menu(name):\n    # Use a breakpoint in the code line below to debug your script.\n    # print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n    if name == 1:",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "mqtt",
        "description": "mqtt",
        "peekOfCode": "def on_connect(client, userdata, flags, reason_code, properties):\n    print(f\"Connected with result code {reason_code}\")\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"mqtt/mes/wavesoldering\")\n# Callback running on new message\ndef on_message(client, userdata, msg):\n    # We print each message received\n    print(json.dump(mqtt.MQTTMessage,msg))\n    print(msg.payload)",
        "detail": "mqtt",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "mqtt",
        "description": "mqtt",
        "peekOfCode": "def on_message(client, userdata, msg):\n    # We print each message received\n    print(json.dump(mqtt.MQTTMessage,msg))\n    print(msg.payload)\n    if str(msg.payload) == \"b'Ready to scan'\":\n          client.publish(\"mqtt/mes/wavesoldering\", \"Scanning\")\n    if str(msg.payload) == \"b'Finish'\":\n        client.publish(\"mqtt/mes/wavesoldering\", \"Done\")\n# Initiate the MQTT client\nclient = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)",
        "detail": "mqtt",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mqtt",
        "description": "mqtt",
        "peekOfCode": "client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\nclient.on_connect = on_connect\nclient.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"192.168.1.213\", 1883, 60)\nclient.loop_forever()",
        "detail": "mqtt",
        "documentation": {}
    },
    {
        "label": "client.on_connect",
        "kind": 5,
        "importPath": "mqtt",
        "description": "mqtt",
        "peekOfCode": "client.on_connect = on_connect\nclient.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"192.168.1.213\", 1883, 60)\nclient.loop_forever()",
        "detail": "mqtt",
        "documentation": {}
    },
    {
        "label": "client.on_message",
        "kind": 5,
        "importPath": "mqtt",
        "description": "mqtt",
        "peekOfCode": "client.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"192.168.1.213\", 1883, 60)\nclient.loop_forever()",
        "detail": "mqtt",
        "documentation": {}
    },
    {
        "label": "get_center",
        "kind": 2,
        "importPath": "multiscanner",
        "description": "multiscanner",
        "peekOfCode": "def get_center(contour):\n    M = cv2.moments(contour)\n    cX = int(M[\"m10\"] / max(M[\"m00\"], 1e-6))\n    cY = int(M[\"m01\"] / max(M[\"m00\"], 1e-6))\n    return cX, cY\ndef find_rectangles(img):\n    filtered = np.zeros((img.shape[0], img.shape[1], 1), dtype=np.uint8) \n    img = cv2.GaussianBlur(img, (5, 5), 0)\n    for gray in cv2.split(img):\n      for thrs in range(50, 200, 1):",
        "detail": "multiscanner",
        "documentation": {}
    },
    {
        "label": "find_rectangles",
        "kind": 2,
        "importPath": "multiscanner",
        "description": "multiscanner",
        "peekOfCode": "def find_rectangles(img):\n    filtered = np.zeros((img.shape[0], img.shape[1], 1), dtype=np.uint8) \n    img = cv2.GaussianBlur(img, (5, 5), 0)\n    for gray in cv2.split(img):\n      for thrs in range(50, 200, 1):\n          _retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)\n          contours, h = cv2.findContours(~bin, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)\n          contours = [contours[i] for i in range(len(contours)) if h[0][i][3] == -1]\n          for cnt in contours:\n              cnt_len = cv2.arcLength(cnt, True)",
        "detail": "multiscanner",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 2,
        "importPath": "multiscanner",
        "description": "multiscanner",
        "peekOfCode": "def dist(p1, p2):\n  return math.sqrt((p1[0] - p2[0]) **2 + (p1[1] - p2[1]) ** 2)  \ndef findBarCodes(image):\n  thresh = find_rectangles(image)\n  contours, h = cv2.findContours(thresh, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)\n  contours = sorted([contours[i] for i in range(len(contours)) if h[0][i][3] == -1], key = lambda x: cv2.boundingRect(x)[0])\n  groups = []\n  for cnt in contours:\n    x, y, w, h = cv2.boundingRect(cnt)\n    center_1 = get_center(cnt)",
        "detail": "multiscanner",
        "documentation": {}
    },
    {
        "label": "findBarCodes",
        "kind": 2,
        "importPath": "multiscanner",
        "description": "multiscanner",
        "peekOfCode": "def findBarCodes(image):\n  thresh = find_rectangles(image)\n  contours, h = cv2.findContours(thresh, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)\n  contours = sorted([contours[i] for i in range(len(contours)) if h[0][i][3] == -1], key = lambda x: cv2.boundingRect(x)[0])\n  groups = []\n  for cnt in contours:\n    x, y, w, h = cv2.boundingRect(cnt)\n    center_1 = get_center(cnt)\n    found = False\n    if w * h > 50 and w * h > thresh.shape[0] * thresh.shape[1] / 2:",
        "detail": "multiscanner",
        "documentation": {}
    },
    {
        "label": "remove",
        "kind": 2,
        "importPath": "remove-dir",
        "description": "remove-dir",
        "peekOfCode": "def remove(path):\n    \"\"\"param <path> could either be relative or absolute.\"\"\"\n    if os.path.isfile(path) or os.path.islink(path):\n        os.remove(path)  # remove the file\n    elif os.path.isdir(path):\n        shutil.rmtree(path)  # remove dir and all contains\n    else:\n        raise ValueError(\"file {} is not a file or dir.\".format(path))",
        "detail": "remove-dir",
        "documentation": {}
    },
    {
        "label": "read_out_locations_need_to_be_checked",
        "kind": 2,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "def read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:\n        with open(coordinate_file_path, \"r\") as file:\n            for line in file:\n                # top_left_x: int = int(line.strip().split(\",\")[0])\n                # top_left_y: int = int(line.strip().split(\",\")[1])\n                # bottom_right_x: int = int(line.strip().split(\",\")[2])\n                # bottom_right_y: int = int(line.strip().split(\",\")[3])\n                # top_left = (top_left_x, top_left_y)\n                # bottom_right = (bottom_right_x, bottom_right_y)",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "def scan():\n    # x = [0, 1000, 2000, 3000]\n    # y = [0, 600, 1200, 1800]\n    # mixed = list(zip(zip(x, y), zip(x, y)))\n    # areas = select('captured_image.jpg')\n    # if len(areas) > 0:\n    #     with open(\"coordinate.txt\", 'w') as file:o7777777777777ii7oo7o5\n    #                 for item in areas:\n    #                         topLeft = item[0]\n    #                         bottomRight = item[1]",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "on_connect",
        "kind": 2,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "def on_connect(client, userdata, flags, reason_code, properties):\n    print(f\"Connected with result code {reason_code}\")\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"mqtt/mes/wavesoldering\")\n    client.publish(\"mqtt/mes/wavesoldering\", \"Done\")\n    client.subscribe(\"mqtt/mes/scanner\")\n    client.publish(\"mqtt/mes/scanner\", \"Test\")\n# Callback running on new message\ndef on_message(client, userdata, msg):",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "def on_message(client, userdata, msg):\n    global busy\n    if not busy:\n        # We print each message received\n        # print(json.dump(mqtt.MQTTMessage,msg))\n        # print(msg.payload)\n        try:\n            draw.rectangle((0, 0, width, height), outline=0, fill=0)\n            # Shell scripts for system monitoring from here : https://unix.stackexchange.com/questions/119126/command-to-display-memory-usage-disk-usage-and-cpu-load\n            # Write two lines of text.",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "READY",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "READY = 16\n# Set GPIO mode to BCM\n# GPIO.setmode(GPIO.BCM)\n# # Set the pin number you want to monitor\n# # Setup the pin as input\n# # Note the following are only used with SPI:\n# GPIO.setup(READY, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)\n# Raspberry Pi pin configuration:\nRST = None  # on the PiOLED this pin isnt used\n# Note the following are only used with SPI:",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "RST",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "RST = None  # on the PiOLED this pin isnt used\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST =import json\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "DC",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "DC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST =import json\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "SPI_PORT",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "SPI_PORT = 0\nSPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST =import json\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "SPI_DEVICE",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "SPI_DEVICE = 0\n# Beaglebone Black pin configuration:\n# RST =import json\n# Note the following are only used with SPI:\n# DC = 'P9_15'\n# SPI_PORT = 1\n# SPI_DEVICE = 0\n# 128x32 display with hardware I2C:\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# Initialize library.",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "disp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n# Initialize library.\ndisp.begin()\n# Clear display.\ndisp.clear()\ndisp.display()\n# Create blank image for drawing.\n# Make sure to create image with mode '1' for 1-bit color.\nwidth = disp.width\nheight = disp.height",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "width = disp.width\nheight = disp.height\nimage_display = Image.new(\"1\", (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image_display)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0, 0, width, height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "height = disp.height\nimage_display = Image.new(\"1\", (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image_display)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0, 0, width, height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "image_display",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "image_display = Image.new(\"1\", (width, height))\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image_display)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0, 0, width, height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height - padding",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "draw = ImageDraw.Draw(image_display)\n# Draw a black filled box to clear the image.\ndraw.rectangle((0, 0, width, height), outline=0, fill=0)\n# Draw some shapes.\n# First define some constants to allow easy resizing of shapes.\npadding = -2\ntop = padding\nbottom = height - padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "padding = -2\ntop = padding\nbottom = height - padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\nglobal areas\nareas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "top = padding\nbottom = height - padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\nglobal areas\nareas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "bottom = height - padding\n# Move left to right keeping track of the current x position for drawing shapes.\nx = 0\n# Load default font.\nfont = ImageFont.load_default()\nglobal areas\nareas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:\n        with open(coordinate_file_path, \"r\") as file:",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "x = 0\n# Load default font.\nfont = ImageFont.load_default()\nglobal areas\nareas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:\n        with open(coordinate_file_path, \"r\") as file:\n            for line in file:\n                # top_left_x: int = int(line.strip().split(\",\")[0])",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "font = ImageFont.load_default()\nglobal areas\nareas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:\n        with open(coordinate_file_path, \"r\") as file:\n            for line in file:\n                # top_left_x: int = int(line.strip().split(\",\")[0])\n                # top_left_y: int = int(line.strip().split(\",\")[1])\n                # bottom_right_x: int = int(line.strip().split(\",\")[2])",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "areas",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "areas = []\ndef read_out_locations_need_to_be_checked(coordinate_file_path):\n    try:\n        with open(coordinate_file_path, \"r\") as file:\n            for line in file:\n                # top_left_x: int = int(line.strip().split(\",\")[0])\n                # top_left_y: int = int(line.strip().split(\",\")[1])\n                # bottom_right_x: int = int(line.strip().split(\",\")[2])\n                # bottom_right_y: int = int(line.strip().split(\",\")[3])\n                # top_left = (top_left_x, top_left_y)",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "array_code",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "array_code = []\nareas = read_out_locations_need_to_be_checked(\"coordinate.txt\")\nerror = BarcodeReader.init_license(\"DLS2eyJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSJ9\")\nif error[0] != EnumErrorCode.DBR_OK:\n    print(\"License error: \" + error[1])\n# 2.Create an instance of Barcode Reader.\nreader = BarcodeReader.get_instance()\nif reader == None:\n    raise BarcodeReaderError(\"Get instance failed\")\ndef scan():",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "areas",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "areas = read_out_locations_need_to_be_checked(\"coordinate.txt\")\nerror = BarcodeReader.init_license(\"DLS2eyJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSJ9\")\nif error[0] != EnumErrorCode.DBR_OK:\n    print(\"License error: \" + error[1])\n# 2.Create an instance of Barcode Reader.\nreader = BarcodeReader.get_instance()\nif reader == None:\n    raise BarcodeReaderError(\"Get instance failed\")\ndef scan():\n    # x = [0, 1000, 2000, 3000]",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "error = BarcodeReader.init_license(\"DLS2eyJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSJ9\")\nif error[0] != EnumErrorCode.DBR_OK:\n    print(\"License error: \" + error[1])\n# 2.Create an instance of Barcode Reader.\nreader = BarcodeReader.get_instance()\nif reader == None:\n    raise BarcodeReaderError(\"Get instance failed\")\ndef scan():\n    # x = [0, 1000, 2000, 3000]\n    # y = [0, 600, 1200, 1800]",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "reader = BarcodeReader.get_instance()\nif reader == None:\n    raise BarcodeReaderError(\"Get instance failed\")\ndef scan():\n    # x = [0, 1000, 2000, 3000]\n    # y = [0, 600, 1200, 1800]\n    # mixed = list(zip(zip(x, y), zip(x, y)))\n    # areas = select('captured_image.jpg')\n    # if len(areas) > 0:\n    #     with open(\"coordinate.txt\", 'w') as file:o7777777777777ii7oo7o5",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "tr",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "tr = []\nglobal busy\nbusy = False\n# Callback running on connection\ndef on_connect(client, userdata, flags, reason_code, properties):\n    print(f\"Connected with result code {reason_code}\")\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"mqtt/mes/wavesoldering\")\n    client.publish(\"mqtt/mes/wavesoldering\", \"Done\")",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "busy",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "busy = False\n# Callback running on connection\ndef on_connect(client, userdata, flags, reason_code, properties):\n    print(f\"Connected with result code {reason_code}\")\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"mqtt/mes/wavesoldering\")\n    client.publish(\"mqtt/mes/wavesoldering\", \"Done\")\n    client.subscribe(\"mqtt/mes/scanner\")\n    client.publish(\"mqtt/mes/scanner\", \"Test\")",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\nclient.on_connect = on_connect\nclient.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"10.100.27.67\", 1883, 60)\n# def pin_event(channel):\n#     global busy\n#     if GPIO.input(READY) == 1:\n#         busy = True",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "client.on_connect",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "client.on_connect = on_connect\nclient.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"10.100.27.67\", 1883, 60)\n# def pin_event(channel):\n#     global busy\n#     if GPIO.input(READY) == 1:\n#         busy = True\n#         tr = scan()",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "client.on_message",
        "kind": 5,
        "importPath": "scanner",
        "description": "scanner",
        "peekOfCode": "client.on_message = on_message\n# Replace `<USER>`, `<PASSWORD>` and `<XXXXXX>.stackhero-network.com` with your server credentials.\nclient.username_pw_set(\"mesclient\", \"1\")\nclient.connect(\"10.100.27.67\", 1883, 60)\n# def pin_event(channel):\n#     global busy\n#     if GPIO.input(READY) == 1:\n#         busy = True\n#         tr = scan()\n#         busy = False",
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "cam",
        "kind": 5,
        "importPath": "simpleCV",
        "description": "simpleCV",
        "peekOfCode": "cam = Camera()\n# Loop to continuously get images\nwhile True:\n    # Get Image from camera\n    img = cam.getImage()\n    # Make image black and white\n    img = img.binarize()\n    # Draw the text \"Hello World\" on image\n    img.drawText(\"Hello World!\")\n    # Show the image",
        "detail": "simpleCV",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "zbarscanner",
        "description": "zbarscanner",
        "peekOfCode": "def decode(image):\n    # decodes all barcodes from an image\n    pyzbar.ZBarConfig(0)\n    decoded_objects = pyzbar.decode(image)\n    for obj in decoded_objects:\n        # draw the barcode\n        print(\"detected barcode:\", obj)\n        image = draw_barcode(obj, image)\n        # print barcode type & data\n        print(\"Type:\", obj.type)",
        "detail": "zbarscanner",
        "documentation": {}
    },
    {
        "label": "draw_barcode",
        "kind": 2,
        "importPath": "zbarscanner",
        "description": "zbarscanner",
        "peekOfCode": "def draw_barcode(decoded, image):\n    # n_points = len(decoded.polygon)\n    # for i in range(n_points):\n    #     image = cv2.line(image, decoded.polygon[i], decoded.polygon[(i+1) % n_points], color=(0, 255, 0), thickness=5)\n    # uncomment above and comment below if you want to draw a polygon and not a rectangle\n    image = cv2.rectangle(image, (decoded.rect.left, decoded.rect.top), \n                            (decoded.rect.left + decoded.rect.width, decoded.rect.top + decoded.rect.height),\n                            color=(0, 255, 0),\n                            thickness=5)\n    return image",
        "detail": "zbarscanner",
        "documentation": {}
    }
]